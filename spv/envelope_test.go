package spv

import (
	"encoding/hex"
	"encoding/json"
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/libsv/go-bc"
)

func TestEnvelope_IsAnchored(t *testing.T) {
	tests := map[string]struct {
		envelope Envelope
		exp      bool
	}{
		"is anchored": {
			envelope: Envelope{
				Proof: &bc.MerkleProof{},
			},
			exp: true,
		},
		"is not anchored": {
			envelope: Envelope{},
			exp:      false,
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			assert.Equal(t, test.exp, test.envelope.IsAnchored())
		})
	}
}

func TestEnvelope_Bytes_IsValid(t *testing.T) {
	tests := map[string]struct {
		jsonString string
		hexString  string
	}{
		"serialisation works": {
			jsonString: `{
				"txid": "d23ac12a990c3be3ff53bac731a5e9839375854dbfd889e420f05abf05204ecc",
				"rawTx": "0100000001f49f4b06f4f3244323fd11e7931838308780eafca389cd32b8ff614056088cfb010000006a4730440220470ec034c9f5a41fa5ebb752c1d7bfad5af7659861c52aae87768a6289bf110602207d584a686235800e9624b9ceeb9704b927c005b32310810987ec01652196ab7741210305d46481dd94e548669d30689e3b57d0a497e7265786308e3c6809dd8cee5dadffffffff02a00f0000000000001976a9147274c98d89bddefa863157f5a0f4789bc85856ac88ac81790000000000001976a914b77edad7bf765b4f1c412c49d9e7e549db98d6c988ac00000000",
				"parents": {
					"fb8c08564061ffb832cd89a3fcea808730381893e711fd234324f3f4064b9ff4": {
						"txid": "fb8c08564061ffb832cd89a3fcea808730381893e711fd234324f3f4064b9ff4",
						"rawTx": "0100000001c85091ec57f85d5cbb33a0926ff1bce469336f1912aaf73cd3977ff019e692de000000006b483045022100f2204fd3d87cab883c9d8d38068526eb653632c226c658480f72c1991c47f7e702207d2a20e6c477fe066b2a5976f1869006f21e34abdfa3fdf969c188e4b340f8d2412103d46926f6022e11ae35377a0277dc30bf0ed89282751301d0bd7720b590f9a1dbffffffff02a00f0000000000001976a91495cb3f890282d0aef458b9ca7d4a8f1b69c186b988ac92890000000000001976a9141c4f1e75d42057361e5d9443115c1938508f6e6388ac00000000",
						"parents": {
							"de92e619f07f97d33cf7aa12196f3369e4bcf16f92a033bb5c5df857ec9150c8": {
								"txid": "de92e619f07f97d33cf7aa12196f3369e4bcf16f92a033bb5c5df857ec9150c8",
								"rawTx": "0100000001f5668131b454c6d1960abc0cbf1be7fa938b0159560aa8cf9b9ce0def11898cd000000006b483045022100db3438332eec734c2393af37dfbd1c6ee1d00a5758c03a898a9cc3d3716f0798022077d1bdca0408651ab704feac5b9f1360d57db4819139d0518faf0eb4e48d1922412103ab3a2cf940e5f0aa0aa2bdd81c7ccc254de9d00dd677cc30e7486530ed9be092ffffffff01a3990000000000001976a914689547124e697984194a62f4c70506e7240962e688ac00000000",
								"proof": {
									"index": 2,
									"txOrId": "de92e619f07f97d33cf7aa12196f3369e4bcf16f92a033bb5c5df857ec9150c8",
									"target": "00000020d334108eb95ddefc0ea5ffbfc4ae7792cf5ed54bac9f80608d26d79c00000000f5b42d19624ac642ba93d0443c8296c742d1f0dd509878c1b1c9f71d1b4c9b102ac868616aa3001d04557ccd",
									"nodes": [
										"4c05bd4c079a2269f14a4347e959abaccb37697f70cbb08b8426e6674e09cd24",
										"374c06c4ee471a2687498bd09bf42322aea3ca1e653cd23810baa1609b0ce25e",
										"f4e18eb36ecde0719e1c8a2dc803768af250d76d08f4ab1a9fd2c08d905b6af3"
									],
									"targetType": "header"
								}
							}
						}
					}
				}
			}`,
			hexString: "0101e10100000001f49f4b06f4f3244323fd11e7931838308780eafca389cd32b8ff614056088cfb010000006a4730440220470ec034c9f5a41fa5ebb752c1d7bfad5af7659861c52aae87768a6289bf110602207d584a686235800e9624b9ceeb9704b927c005b32310810987ec01652196ab7741210305d46481dd94e548669d30689e3b57d0a497e7265786308e3c6809dd8cee5dadffffffff02a00f0000000000001976a9147274c98d89bddefa863157f5a0f4789bc85856ac88ac81790000000000001976a914b77edad7bf765b4f1c412c49d9e7e549db98d6c988ac0000000001e20100000001c85091ec57f85d5cbb33a0926ff1bce469336f1912aaf73cd3977ff019e692de000000006b483045022100f2204fd3d87cab883c9d8d38068526eb653632c226c658480f72c1991c47f7e702207d2a20e6c477fe066b2a5976f1869006f21e34abdfa3fdf969c188e4b340f8d2412103d46926f6022e11ae35377a0277dc30bf0ed89282751301d0bd7720b590f9a1dbffffffff02a00f0000000000001976a91495cb3f890282d0aef458b9ca7d4a8f1b69c186b988ac92890000000000001976a9141c4f1e75d42057361e5d9443115c1938508f6e6388ac0000000001c00100000001f5668131b454c6d1960abc0cbf1be7fa938b0159560aa8cf9b9ce0def11898cd000000006b483045022100db3438332eec734c2393af37dfbd1c6ee1d00a5758c03a898a9cc3d3716f0798022077d1bdca0408651ab704feac5b9f1360d57db4819139d0518faf0eb4e48d1922412103ab3a2cf940e5f0aa0aa2bdd81c7ccc254de9d00dd677cc30e7486530ed9be092ffffffff01a3990000000000001976a914689547124e697984194a62f4c70506e7240962e688ac0000000002d60202c85091ec57f85d5cbb33a0926ff1bce469336f1912aaf73cd3977ff019e692decd7c55041d00a36a6168c82a109b4c1b1df7c9b1c1789850ddf0d142c796823c44d093ba42c64a62192db4f5000000009cd7268d60809fac4bd55ecf9277aec4bfffa50efcde5db98e1034d320000000030024cd094e67e626848bb0cb707f6937cbacab59e947434af169229a074cbd054c005ee20c9b60a1ba1038d23c651ecaa3ae2223f49bd08b4987261a47eec4064c3700f36a5b908dc0d29f1aabf4086dd750f28a7603c82d8a1c9e71e0cd6eb38ee1f4",
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			j := []byte(test.jsonString)
			var e Envelope
			err := json.Unmarshal(j, &e)
			if err != nil {
				assert.Error(t, err, "Couldn't decode jsonString")
			}
			fmt.Printf("%+v", e)

			b, err := hex.DecodeString(test.hexString)
			if err != nil {
				assert.Error(t, err, "Couldn't decode hexString")
			}
			fmt.Printf("%+v", b)

			assert.Equal(t, b, *e.Bytes())
			assert.NoError(t, err)
		})
	}
}
